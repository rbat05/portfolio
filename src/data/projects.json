{
  "projects": [
    {
      "id": "rocket",
      "title": "Dual-Axis Rocket Control System",
      "description": "Advanced control system for dual-axis modulation of a rocket during flight.",
      "status": "In Progress",
      "tech": [
        "ANSYS FEA/CFD",
        "OpenRocket",
        "Simulink",
        "Fusion 360"
      ],
      "thumbnail": "üöÄ",
      "term": "Spring 2024",
      "tagline": "Bringing back the golden age of terminal communication",
      "background": "Inspired by early BBS systems and IRC clients, this project recreates the nostalgic experience of terminal-based communication with modern real-time capabilities.",
      "approach": "Built using React for the frontend terminal interface, Node.js backend with Socket.io for real-time messaging, and implemented custom ASCII art rendering.",
      "challenges": "Creating an authentic terminal feel while maintaining modern usability, implementing proper message threading, and ensuring cross-browser compatibility.",
      "outcome": "Successfully deployed application with 100+ active users during demo period. Received positive feedback for authentic retro aesthetic.",
      "github": "https://github.com/yourusername/terminal-chat",
      "demo": "https://yourdemo.com/terminal-chat",
      "youtube": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    },
    {
      "id": "weather",
      "title": "Off-Grid Solar Weather Station",
      "description": "Self-sustaining weather monitoring system with dual-node architecture.",
      "status": "In Progress",
      "tech": [
        "ESP32/8266",
        "Web Deployment",
        "Data Visualization",
        "Electronics"
      ],
      "thumbnail": "üå¶Ô∏è",
      "term": "Fall 2023",
      "tagline": "Transforming digital images into retro text art",
      "background": "ASCII art has been a cornerstone of early computer graphics. This tool modernizes the conversion process while maintaining the charm of text-based imagery.",
      "approach": "Implemented image processing algorithms using Python PIL, created web interface with Flask, and optimized for various ASCII character sets.",
      "challenges": "Balancing detail preservation with ASCII limitations, optimizing processing speed for large images, and creating an intuitive user interface.",
      "outcome": "Generated over 1000 ASCII artworks, integrated into multiple retro-themed projects, and featured in university tech showcase.",
      "github": "https://github.com/yourusername/ascii-generator",
      "demo": "https://yourdemo.com/ascii-generator"
    },
    {
      "id": "gameboy",
      "title": "Custom Portable Gaming Console",
      "description": "Handheld emulation system with Gameboy-inspired design.",
      "status": "Complete",
      "tech": [
        "RPI 3B+",
        "Linux (RetroPie)",
        "Hardware Design",
        "Fusion 360"
      ],
      "thumbnail": "üëæ",
      "term": "Spring 2024",
      "tagline": "Building tomorrow's retro games today",
      "background": "Modern game engines often overcomplicate simple 2D game development. This engine focuses on pixel-perfect rendering and authentic retro game feel.",
      "approach": "Developed in C++ using OpenGL for rendering and SDL2 for input handling. Implemented sprite batching, tile-based collision, and retro-style audio.",
      "challenges": "Achieving pixel-perfect rendering across different screen resolutions, implementing efficient sprite batching, and maintaining 60fps performance.",
      "outcome": "Currently in development with basic rendering and physics systems complete. Planning to release demo games showcasing engine capabilities.",
      "github": "https://github.com/yourusername/retro-engine"
    },
    {
      "id": "daldy",
      "title": "Daldy Tugboat Digital Preservation",
      "description": "Digital preservation project for the historic Willam C Daldy tugboat.",
      "status": "Complete",
      "tech": [
        "Blender",
        "3D Modelling",
        "3D Printing",
        "Volunteering"
      ],
      "thumbnail": "üõ•Ô∏è",
      "term": "Spring 2024",
      "tagline": "Building tomorrow's retro games today",
      "background": "Modern game engines often overcomplicate simple 2D game development. This engine focuses on pixel-perfect rendering and authentic retro game feel.",
      "approach": "Developed in C++ using OpenGL for rendering and SDL2 for input handling. Implemented sprite batching, tile-based collision, and retro-style audio.",
      "challenges": "Achieving pixel-perfect rendering across different screen resolutions, implementing efficient sprite batching, and maintaining 60fps performance.",
      "outcome": "Currently in development with basic rendering and physics systems complete. Planning to release demo games showcasing engine capabilities.",
      "github": "https://github.com/yourusername/retro-engine"
    }
  ]
}